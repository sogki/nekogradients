import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Copy, Check, Code, Download } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface CssOutputProps {
  gradientCss: string;
}

export function CssOutput({ gradientCss }: CssOutputProps) {
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(`background: ${gradientCss};`);
      setCopied(true);
      toast({
        title: "Copied to clipboard! üêæ",
        description: "CSS gradient code has been copied to your clipboard.",
      });
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      toast({
        title: "Copy failed",
        description: "Failed to copy to clipboard. Please try again.",
        variant: "destructive",
      });
    }
  };

  const downloadCss = () => {
    const cssContent = `/* Generated by NekoGradients üêæ */
.gradient {
  background: ${gradientCss};
}

/* Alternative usage */
.gradient-bg {
  background-image: ${gradientCss};
}`;

    const blob = new Blob([cssContent], { type: 'text/css' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'neko-gradient.css';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "CSS file downloaded! üêæ",
      description: "Your gradient CSS file has been saved.",
    });
  };

  return (
    <motion.div
      className="css-output"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.3 }}
    >
      <Card className="p-4 space-y-4 bg-surface/50 backdrop-blur-sm border-border/50">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Code className="w-4 h-4 text-primary" />
            <Label className="text-sm font-medium">CSS Output</Label>
          </div>
          <div className="flex gap-2">
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button
                size="sm"
                variant="outline"
                onClick={downloadCss}
                className="gap-2"
              >
                <Download className="w-4 h-4" />
                Download
              </Button>
            </motion.div>
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button
                size="sm"
                onClick={copyToClipboard}
                className="gap-2"
              >
                <AnimatePresence mode="wait">
                  {copied ? (
                    <motion.div
                      key="check"
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      exit={{ scale: 0 }}
                      transition={{ type: "spring", stiffness: 500, damping: 30 }}
                    >
                      <Check className="w-4 h-4" />
                    </motion.div>
                  ) : (
                    <motion.div
                      key="copy"
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      exit={{ scale: 0 }}
                    >
                      <Copy className="w-4 h-4" />
                    </motion.div>
                  )}
                </AnimatePresence>
                {copied ? 'Copied!' : 'Copy'}
              </Button>
            </motion.div>
          </div>
        </div>
        
        <div className="relative">
          <Textarea
            value={`background: ${gradientCss};`}
            readOnly
            className="font-mono text-sm min-h-[120px] resize-none bg-background/50 border-border/50"
          />
        </div>

        <motion.div 
          className="space-y-2 text-xs text-muted-foreground bg-muted/30 p-3 rounded-lg"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
        >
          <p className="font-medium">Usage Examples:</p>
          <div className="space-y-1 font-mono">
            <div className="bg-background/50 px-2 py-1 rounded">
              .my-gradient {'{'} background: {gradientCss}; {'}'}
            </div>
            <div className="bg-background/50 px-2 py-1 rounded">
              &lt;div style="background: {gradientCss}"&gt;
            </div>
          </div>
        </motion.div>
      </Card>
    </motion.div>
  );
}